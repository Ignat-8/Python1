# * (вместо задачи 3) Написать функцию thesaurus_adv(),
# принимающую в качестве аргументов строки в формате «Имя Фамилия»
# и возвращающую словарь, в котором ключи — первые буквы фамилий,
# а значения — словари, реализованные по схеме предыдущего задания
# и содержащие записи, в которых фамилия начинается с соответствующей буквы. Например:
# >>> >>> thesaurus_adv("Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева")
# {
#     "А": {
#         "П": "Петр Алексеев"
#     },
#     "С": {
#         "И": ["Иван Сергеев", "Инна Серова"],
#         "А": ["Анна Савельева"]
#     }
# }
# Сможете ли вы вернуть отсортированный по ключам словарь?


def thesaurus_adv(names):
    names_dict = {}  # словарь имен
    names.sort()  # сортируем входящий список, чтобы потом не сортировать вложенные словари
    for elem in names:  # для всех имен в списке
        # определяем координаты ФИО в словаре
        # первый элемент показывает положение в основном словаре
        # второй элемент положение во вложенном словаре
        name_coord = [elem.split(' ')[1][0], elem.split(' ')[0][0]]
        if names_dict.get(name_coord[0]):  # если есть основной ключ словаря,
            if names_dict[name_coord[0]].get(name_coord[1]):  # если есть вложенный ключ словаря
                names_dict[name_coord[0]][name_coord[1]].append(elem)  # то добавляем элемент к существующему списку
            else:  # если вложенного ключа нет,
                names_dict[name_coord[0]].update({name_coord[1]: [elem]})  # то создаем вложенную запись словаря
        else:  # если основного ключа нет
            names_dict.update({name_coord[0]: {name_coord[1]: [elem]}})  # то добавляем основную запись с вложенным словарем
    return dict(sorted(names_dict.items()))  # возвращаем отсортированный словарь


names = ["Иван Сергеев", "Инна Серова", "Петр Алексеев", "Илья Иванов", "Анна Савельева", "Игорь Бураков"]
print('Исходный список имен :\n', names)
print('\nСловарь имен :\n', thesaurus_adv(names))
